(function (A, E) { if (typeof define === "function" && define.amd) { define(["moment", "jquery", "exports"], function (F, H, G) { A.daterangepicker = E(A, G, F, H) }) } else { if (typeof exports !== "undefined") { var B = require("moment"); var D; try { D = require("jquery") } catch (C) { D = window.jQuery; if (!D) { throw new Error("jQuery dependency not found") } } E(A, exports, B, D) } else { A.daterangepicker = E(A, {}, A.moment, (A.jQuery || A.Zepto || A.ender || A.$)) } } }(this, function (B, C, D, E) { var A = function (J, G, F) { this.parentEl = "body"; this.element = E(J); this.isShowing = false; var H = '<div class="daterangepicker dropdown-menu"><div class="calendar left"></div><div class="calendar right"></div><div class="ranges"><div class="range_inputs"><div class="daterangepicker_start_input"><label for="daterangepicker_start"></label><input class="input-mini" type="text" name="daterangepicker_start" value="" /></div><div class="daterangepicker_end_input"><label for="daterangepicker_end"></label><input class="input-mini" type="text" name="daterangepicker_end" value="" /></div><button class="applyBtn" disabled="disabled"></button>&nbsp;<button class="cancelBtn"></button></div></div></div>'; if (typeof G !== "object" || G === null) { G = {} } this.parentEl = (typeof G === "object" && G.parentEl && E(G.parentEl).length) ? E(G.parentEl) : E(this.parentEl); this.container = E(H).appendTo(this.parentEl); this.setOptions(G, F); var I = this.container; E.each(this.buttonClasses, function (K, L) { I.find("button").addClass(L) }); this.container.find(".daterangepicker_start_input label").html(this.locale.fromLabel); this.container.find(".daterangepicker_end_input label").html(this.locale.toLabel); if (this.applyClass.length) { this.container.find(".applyBtn").addClass(this.applyClass) } if (this.cancelClass.length) { this.container.find(".cancelBtn").addClass(this.cancelClass) } this.container.find(".applyBtn").html(this.locale.applyLabel); this.container.find(".cancelBtn").html(this.locale.cancelLabel); this.container.find(".calendar").on("click.daterangepicker", ".prev", E.proxy(this.clickPrev, this)).on("click.daterangepicker", ".next", E.proxy(this.clickNext, this)).on("click.daterangepicker", "td.available", E.proxy(this.clickDate, this)).on("mouseenter.daterangepicker", "td.available", E.proxy(this.hoverDate, this)).on("mouseleave.daterangepicker", "td.available", E.proxy(this.updateFormInputs, this)).on("change.daterangepicker", "select.yearselect", E.proxy(this.updateMonthYear, this)).on("change.daterangepicker", "select.monthselect", E.proxy(this.updateMonthYear, this)).on("change.daterangepicker", "select.hourselect,select.minuteselect,select.ampmselect", E.proxy(this.updateTime, this)); this.container.find(".ranges").on("click.daterangepicker", "button.applyBtn", E.proxy(this.clickApply, this)).on("click.daterangepicker", "button.cancelBtn", E.proxy(this.clickCancel, this)).on("click.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", E.proxy(this.showCalendars, this)).on("change.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", E.proxy(this.inputsChanged, this)).on("keydown.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", E.proxy(this.inputsKeydown, this)).on("click.daterangepicker", "li", E.proxy(this.clickRange, this)).on("mouseenter.daterangepicker", "li", E.proxy(this.enterRange, this)).on("mouseleave.daterangepicker", "li", E.proxy(this.updateFormInputs, this)); if (this.element.is("input")) { this.element.on({ "click.daterangepicker": E.proxy(this.show, this), "focus.daterangepicker": E.proxy(this.show, this), "keyup.daterangepicker": E.proxy(this.updateFromControl, this) }) } else { this.element.on("click.daterangepicker", E.proxy(this.toggle, this)) } }; A.prototype = { constructor: A, setOptions: function (L, F) { this.startDate = D().startOf("day"); this.endDate = D().endOf("day"); this.minDate = false; this.maxDate = false; this.dateLimit = false; this.showDropdowns = false; this.showWeekNumbers = false; this.timePicker = false; this.timePickerIncrement = 30; this.timePicker12Hour = true; this.singleDatePicker = false; this.ranges = {}; this.opens = "right"; if (this.element.hasClass("pull-right")) { this.opens = "left" } this.buttonClasses = ["btn", "btn-small btn-sm"]; this.applyClass = "btn-success"; this.cancelClass = "btn-default"; this.format = "MM/DD/YYYY"; this.separator = " - "; this.locale = { applyLabel: "确定", cancelLabel: "取消", fromLabel: "从", toLabel: "到", weekLabel: "W", customRangeLabel: "Custom Range", daysOfWeek: D.weekdaysMin(), monthNames: D.monthsShort(), firstDay: D.localeData()._week.dow }; this.cb = function () { }; if (typeof L.format === "string") { this.format = L.format } if (typeof L.separator === "string") { this.separator = L.separator } if (typeof L.startDate === "string") { this.startDate = D(L.startDate, this.format) } if (typeof L.endDate === "string") { this.endDate = D(L.endDate, this.format) } if (typeof L.minDate === "string") { this.minDate = D(L.minDate, this.format) } if (typeof L.maxDate === "string") { this.maxDate = D(L.maxDate, this.format) } if (typeof L.startDate === "object") { this.startDate = D(L.startDate) } if (typeof L.endDate === "object") { this.endDate = D(L.endDate) } if (typeof L.minDate === "object") { this.minDate = D(L.minDate) } if (typeof L.maxDate === "object") { this.maxDate = D(L.maxDate) } if (typeof L.applyClass === "string") { this.applyClass = L.applyClass } if (typeof L.cancelClass === "string") { this.cancelClass = L.cancelClass } if (typeof L.dateLimit === "object") { this.dateLimit = L.dateLimit } if (typeof L.locale === "object") { if (typeof L.locale.daysOfWeek === "object") { this.locale.daysOfWeek = L.locale.daysOfWeek.slice() } if (typeof L.locale.monthNames === "object") { this.locale.monthNames = L.locale.monthNames.slice() } if (typeof L.locale.firstDay === "number") { this.locale.firstDay = L.locale.firstDay } if (typeof L.locale.applyLabel === "string") { this.locale.applyLabel = L.locale.applyLabel } if (typeof L.locale.cancelLabel === "string") { this.locale.cancelLabel = L.locale.cancelLabel } if (typeof L.locale.fromLabel === "string") { this.locale.fromLabel = L.locale.fromLabel } if (typeof L.locale.toLabel === "string") { this.locale.toLabel = L.locale.toLabel } if (typeof L.locale.weekLabel === "string") { this.locale.weekLabel = L.locale.weekLabel } if (typeof L.locale.customRangeLabel === "string") { this.locale.customRangeLabel = L.locale.customRangeLabel } } if (typeof L.opens === "string") { this.opens = L.opens } if (typeof L.showWeekNumbers === "boolean") { this.showWeekNumbers = L.showWeekNumbers } if (typeof L.buttonClasses === "string") { this.buttonClasses = [L.buttonClasses] } if (typeof L.buttonClasses === "object") { this.buttonClasses = L.buttonClasses } if (typeof L.showDropdowns === "boolean") { this.showDropdowns = L.showDropdowns } if (typeof L.singleDatePicker === "boolean") { this.singleDatePicker = L.singleDatePicker; if (this.singleDatePicker) { this.endDate = this.startDate.clone() } } if (typeof L.timePicker === "boolean") { this.timePicker = L.timePicker } if (typeof L.timePickerIncrement === "number") { this.timePickerIncrement = L.timePickerIncrement } if (typeof L.timePicker12Hour === "boolean") { this.timePicker12Hour = L.timePicker12Hour } if (this.locale.firstDay != 0) { var M = this.locale.firstDay; while (M > 0) { this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()); M-- } } var G, I, O; if (typeof L.startDate === "undefined" && typeof L.endDate === "undefined") { if (E(this.element).is("input[type=text]")) { var K = E(this.element).val(); var N = K.split(this.separator); G = I = null; if (N.length == 2) { G = D(N[0], this.format); I = D(N[1], this.format) } else { if (this.singleDatePicker) { G = D(K, this.format); I = D(K, this.format) } } if (G !== null && I !== null) { this.startDate = G; this.endDate = I } } } if (typeof L.ranges === "object") { for (O in L.ranges) { G = D(L.ranges[O][0]); I = D(L.ranges[O][1]); if (this.minDate && G.isBefore(this.minDate)) { G = D(this.minDate) } if (this.maxDate && I.isAfter(this.maxDate)) { I = D(this.maxDate) } if ((this.minDate && I.isBefore(this.minDate)) || (this.maxDate && G.isAfter(this.maxDate))) { continue } this.ranges[O] = [G, I] } var H = "<ul>"; for (O in this.ranges) { H += "<li>" + O + "</li>" } H += "<li>" + this.locale.customRangeLabel + "</li>"; H += "</ul>"; this.container.find(".ranges ul").remove(); this.container.find(".ranges").prepend(H) } if (typeof F === "function") { this.cb = F } if (!this.timePicker) { this.startDate = this.startDate.startOf("day"); this.endDate = this.endDate.endOf("day") } if (this.singleDatePicker) { this.opens = "right"; this.container.addClass("single"); this.container.find(".calendar.right").show(); this.container.find(".calendar.left").hide(); if (!this.timePicker) { this.container.find(".ranges").hide() } else { this.container.find(".ranges .daterangepicker_start_input, .ranges .daterangepicker_end_input").hide() } if (!this.container.find(".calendar.right").hasClass("single")) { this.container.find(".calendar.right").addClass("single") } } else { this.container.removeClass("single"); this.container.find(".calendar.right").removeClass("single"); this.container.find(".ranges").show() } this.oldStartDate = this.startDate.clone(); this.oldEndDate = this.endDate.clone(); this.oldChosenLabel = this.chosenLabel; this.leftCalendar = { month: D([this.startDate.year(), this.startDate.month(), 1, this.startDate.hour(), this.startDate.minute()]), calendar: [] }; this.rightCalendar = { month: D([this.endDate.year(), this.endDate.month(), 1, this.endDate.hour(), this.endDate.minute()]), calendar: [] }; if (this.opens == "right") { var J = this.container.find(".calendar.left"); var P = this.container.find(".calendar.right"); if (P.hasClass("single")) { P.removeClass("single"); J.addClass("single") } J.removeClass("left").addClass("right"); P.removeClass("right").addClass("left"); if (this.singleDatePicker) { J.show(); P.hide() } } if (typeof L.ranges === "undefined" && !this.singleDatePicker) { this.container.addClass("show-calendar") } this.container.addClass("opens" + this.opens); this.updateView(); this.updateCalendars() }, setStartDate: function (F) { if (typeof F === "string") { this.startDate = D(F, this.format) } if (typeof F === "object") { this.startDate = D(F) } if (!this.timePicker) { this.startDate = this.startDate.startOf("day") } this.oldStartDate = this.startDate.clone(); this.updateView(); this.updateCalendars(); this.updateInputText() }, setEndDate: function (F) { if (typeof F === "string") { this.endDate = D(F, this.format) } if (typeof F === "object") { this.endDate = D(F) } if (!this.timePicker) { this.endDate = this.endDate.endOf("day") } this.oldEndDate = this.endDate.clone(); this.updateView(); this.updateCalendars(); this.updateInputText() }, updateView: function () { this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute()); this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute()); this.updateFormInputs() }, updateFormInputs: function () { this.container.find("input[name=daterangepicker_start]").val(this.startDate.format(this.format)); this.container.find("input[name=daterangepicker_end]").val(this.endDate.format(this.format)); if (this.startDate.isSame(this.endDate) || this.startDate.isBefore(this.endDate)) { this.container.find("button.applyBtn").removeAttr("disabled") } else { this.container.find("button.applyBtn").attr("disabled", "disabled") } }, updateFromControl: function () { if (!this.element.is("input")) { return } if (!this.element.val().length) { return } var G = this.element.val().split(this.separator), H = null, F = null; if (G.length === 2) { H = D(G[0], this.format); F = D(G[1], this.format) } if (this.singleDatePicker || H === null || F === null) { H = D(this.element.val(), this.format); F = H } if (F.isBefore(H)) { return } this.oldStartDate = this.startDate.clone(); this.oldEndDate = this.endDate.clone(); this.startDate = H; this.endDate = F; if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) { this.notify() } this.updateCalendars() }, notify: function () { this.updateView(); this.cb(this.startDate, this.endDate, this.chosenLabel) }, move: function () { var F = { top: 0, left: 0 }; var G = E(window).width(); if (!this.parentEl.is("body")) { F = { top: this.parentEl.offset().top - this.parentEl.scrollTop(), left: this.parentEl.offset().left - this.parentEl.scrollLeft() }; G = this.parentEl[0].clientWidth + this.parentEl.offset().left } if (this.opens == "left") { this.container.css({ top: this.element.offset().top + this.element.outerHeight() - F.top, right: G - this.element.offset().left - this.element.outerWidth(), left: "auto" }); if (this.container.offset().left < 0) { this.container.css({ right: "auto", left: 9 }) } } else { this.container.css({ top: this.element.offset().top + this.element.outerHeight() - F.top, left: this.element.offset().left - F.left, right: "auto" }); if (this.container.offset().left + this.container.outerWidth() > E(window).width()) { this.container.css({ left: "auto", right: 0 }) } } }, toggle: function (F) { if (this.element.hasClass("active")) { this.hide() } else { this.show() } }, show: function (F) { if (this.isShowing) { return } this.element.addClass("active"); this.container.show(); this.move(); this._outsideClickProxy = E.proxy(function (G) { this.outsideClick(G) }, this); E(document).on("mousedown.daterangepicker", this._outsideClickProxy).on("click.daterangepicker", "[data-toggle=dropdown]", this._outsideClickProxy).on("focusin.daterangepicker", this._outsideClickProxy); this.isShowing = true; this.element.trigger("show.daterangepicker", this) }, outsideClick: function (F) { var G = E(F.target); if (G.closest(this.element).length || G.closest(this.container).length || G.closest(".calendar-date").length) { return } this.hide() }, hide: function (F) { if (!this.isShowing) { return } E(document).off("mousedown.daterangepicker").off("click.daterangepicker", "[data-toggle=dropdown]").off("focusin.daterangepicker"); this.element.removeClass("active"); this.container.hide(); if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) { this.notify() } this.oldStartDate = this.startDate.clone(); this.oldEndDate = this.endDate.clone(); this.isShowing = false; this.element.trigger("hide.daterangepicker", this) }, enterRange: function (G) { var F = G.target.innerHTML; if (F == this.locale.customRangeLabel) { this.updateView() } else { var H = this.ranges[F]; this.container.find("input[name=daterangepicker_start]").val(H[0].format(this.format)); this.container.find("input[name=daterangepicker_end]").val(H[1].format(this.format)) } }, showCalendars: function () { this.container.addClass("show-calendar"); this.move(); this.element.trigger("showCalendar.daterangepicker", this) }, hideCalendars: function () { this.container.removeClass("show-calendar"); this.element.trigger("hideCalendar.daterangepicker", this) }, inputsChanged: function (G) { var F = E(G.target); var J = D(F.val(), this.format); if (!J.isValid()) { return } var H, I; if (F.attr("name") === "daterangepicker_start") { H = J; I = this.endDate } else { H = this.startDate; I = J } this.setCustomDates(H, I) }, inputsKeydown: function (F) { if (F.keyCode === 13) { this.inputsChanged(F); this.notify() } }, updateInputText: function () { if (this.element.is("input") && !this.singleDatePicker) { this.element.val(this.startDate.format(this.format) + this.separator + this.endDate.format(this.format)) } else { if (this.element.is("input")) { this.element.val(this.endDate.format(this.format)) } } }, clickRange: function (G) { var F = G.target.innerHTML; this.chosenLabel = F; if (F == this.locale.customRangeLabel) { this.showCalendars() } else { var H = this.ranges[F]; this.startDate = H[0]; this.endDate = H[1]; if (!this.timePicker) { this.startDate.startOf("day"); this.endDate.endOf("day") } this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute()); this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute()); this.updateCalendars(); this.updateInputText(); this.hideCalendars(); this.hide(); this.element.trigger("apply.daterangepicker", this) } }, clickPrev: function (F) { var G = E(F.target).parents(".calendar"); if (G.hasClass("left")) { this.leftCalendar.month.subtract(1, "month") } else { this.rightCalendar.month.subtract(1, "month") } this.updateCalendars() }, clickNext: function (F) { var G = E(F.target).parents(".calendar"); if (G.hasClass("left")) { this.leftCalendar.month.add(1, "month") } else { this.rightCalendar.month.add(1, "month") } this.updateCalendars() }, hoverDate: function (F) { var I = E(F.target).attr("data-title"); var H = I.substr(1, 1); var J = I.substr(3, 1); var G = E(F.target).parents(".calendar"); if (G.hasClass("left")) { this.container.find("input[name=daterangepicker_start]").val(this.leftCalendar.calendar[H][J].format(this.format)) } else { this.container.find("input[name=daterangepicker_end]").val(this.rightCalendar.calendar[H][J].format(this.format)) } }, setCustomDates: function (H, F) { this.chosenLabel = this.locale.customRangeLabel; if (H.isAfter(F)) { var G = this.endDate.diff(this.startDate); F = D(H).add(G, "ms") } this.startDate = H; this.endDate = F; this.updateView(); this.updateCalendars() }, clickDate: function (F) { var L = E(F.target).attr("data-title"); var K = L.substr(1, 1); var N = L.substr(3, 1); var I = E(F.target).parents(".calendar"); var J, H; if (I.hasClass("left")) { J = this.leftCalendar.calendar[K][N]; H = this.endDate; if (typeof this.dateLimit === "object") { var M = D(J).add(this.dateLimit).startOf("day"); if (H.isAfter(M)) { H = M } } } else { J = this.startDate; H = this.rightCalendar.calendar[K][N]; if (typeof this.dateLimit === "object") { var G = D(H).subtract(this.dateLimit).startOf("day"); if (J.isBefore(G)) { J = G } } } if (this.singleDatePicker && I.hasClass("left")) { H = J.clone() } else { if (this.singleDatePicker && I.hasClass("right")) { J = H.clone() } } I.find("td").removeClass("active"); E(F.target).addClass("active"); this.setCustomDates(J, H); if (!this.timePicker) { H.endOf("day") } if (this.singleDatePicker && !this.timePicker) { this.clickApply() } }, clickApply: function (F) { this.updateInputText(); this.hide(); this.element.trigger("apply.daterangepicker", this) }, clickCancel: function (F) { this.startDate = this.oldStartDate; this.endDate = this.oldEndDate; this.chosenLabel = this.oldChosenLabel; this.updateView(); this.updateCalendars(); this.hide(); this.element.trigger("cancel.daterangepicker", this) }, updateMonthYear: function (G) { var I = E(G.target).closest(".calendar").hasClass("left"), F = I ? "left" : "right", J = this.container.find(".calendar." + F); var K = parseInt(J.find(".monthselect").val(), 10); var H = J.find(".yearselect").val(); this[F + "Calendar"].month.month(K).year(H); this.updateCalendars() }, updateTime: function (F) { var K = E(F.target).closest(".calendar"), L = K.hasClass("left"); var J = parseInt(K.find(".hourselect").val(), 10); var I = parseInt(K.find(".minuteselect").val(), 10); if (this.timePicker12Hour) { var M = K.find(".ampmselect").val(); if (M === "PM" && J < 12) { J += 12 } if (M === "AM" && J === 12) { J = 0 } } if (L) { var G = this.startDate.clone(); G.hour(J); G.minute(I); this.startDate = G; this.leftCalendar.month.hour(J).minute(I) } else { var H = this.endDate.clone(); H.hour(J); H.minute(I); this.endDate = H; this.rightCalendar.month.hour(J).minute(I) } this.updateCalendars() }, updateCalendars: function () { this.leftCalendar.calendar = this.buildCalendar(this.leftCalendar.month.month(), this.leftCalendar.month.year(), this.leftCalendar.month.hour(), this.leftCalendar.month.minute(), "left"); this.rightCalendar.calendar = this.buildCalendar(this.rightCalendar.month.month(), this.rightCalendar.month.year(), this.rightCalendar.month.hour(), this.rightCalendar.month.minute(), "right"); this.container.find(".calendar.left").empty().html(this.renderCalendar(this.leftCalendar.calendar, this.startDate, this.minDate, this.maxDate)); this.container.find(".calendar.right").empty().html(this.renderCalendar(this.rightCalendar.calendar, this.endDate, this.singleDatePicker ? this.minDate : this.startDate, this.maxDate)); this.container.find(".ranges li").removeClass("active"); var H = true; var F = 0; for (var G in this.ranges) { if (this.timePicker) { if (this.startDate.isSame(this.ranges[G][0]) && this.endDate.isSame(this.ranges[G][1])) { H = false; this.chosenLabel = this.container.find(".ranges li:eq(" + F + ")").addClass("active").html() } } else { if (this.startDate.format("YYYY-MM-DD") == this.ranges[G][0].format("YYYY-MM-DD") && this.endDate.format("YYYY-MM-DD") == this.ranges[G][1].format("YYYY-MM-DD")) { H = false; this.chosenLabel = this.container.find(".ranges li:eq(" + F + ")").addClass("active").html() } } F++ } if (H) { this.chosenLabel = this.container.find(".ranges li:last").addClass("active").html(); this.showCalendars() } }, buildCalendar: function (U, R, T, O, J) { var G = D([R, U]).daysInMonth(); var L = D([R, U, 1]); var V = D([R, U, G]); var N = D(L).subtract(1, "month").month(); var H = D(L).subtract(1, "month").year(); var I = D([H, N]).daysInMonth(); var P = L.day(); var M; var S = []; S.firstDay = L; S.lastDay = V; for (M = 0; M < 6; M++) { S[M] = [] } var K = I - P + this.locale.firstDay + 1; if (K > I) { K -= 7 } if (P == this.locale.firstDay) { K = I - 6 } var F = D([H, N, K, 12, O]); var W, Q; for (M = 0, W = 0, Q = 0; M < 42; M++ , W++ , F = D(F).add(24, "hour")) { if (M > 0 && W % 7 === 0) { W = 0; Q++ } S[Q][W] = F.clone().hour(T); F.hour(12) } return S }, renderDropdowns: function (J, R, O) { var H = J.month(); var K = '<select class="monthselect">'; var Q = false; var F = false; for (var M = 0; M < 12; M++) { if ((!Q || M >= R.month()) && (!F || M <= O.month())) { K += "<option value='" + M + "'" + (M === H ? " selected='selected'" : "") + ">" + this.locale.monthNames[M] + "</option>" } } K += "</select>"; var G = J.year(); var N = (O && O.year()) || (G + 5); var I = (R && R.year()) || (G - 50); var L = '<select class="yearselect">'; for (var P = I; P <= N; P++) { L += '<option value="' + P + '"' + (P === G ? ' selected="selected"' : "") + ">" + P + "</option>" } L += "</select>"; return K + L }, renderCalendar: function (G, O, T, R) { var H = '<div class="calendar-date">'; H += '<table class="table-condensed">'; H += "<thead>"; H += "<tr>"; if (this.showWeekNumbers) { H += "<th></th>" } if (!T || T.isBefore(G.firstDay)) { H += '<th class="prev available"><i class="fa fa-angle-left"></i></th>' } else { H += "<th></th>" } var N = this.locale.monthNames[G[1][1].month()] + G[1][1].format(" YYYY"); if (this.showDropdowns) { N = this.renderDropdowns(G[1][1], T, R) } H += '<th colspan="5" class="month">' + N + "</th>"; if (!R || R.isAfter(G.lastDay)) { H += '<th class="next available"><i class="fa fa-angle-right"></i></th>' } else { H += "<th></th>" } H += "</tr>"; H += "<tr>"; if (this.showWeekNumbers) { H += '<th class="week">' + this.locale.weekLabel + "</th>" } E.each(this.locale.daysOfWeek, function (U, V) { H += "<th>" + V + "</th>" }); H += "</tr>"; H += "</thead>"; H += "<tbody>"; for (var S = 0; S < 6; S++) { H += "<tr>"; if (this.showWeekNumbers) { H += '<td class="week">' + G[S][0].week() + "</td>" } for (var F = 0; F < 7; F++) { var K = "available "; K += (G[S][F].month() == G[1][1].month()) ? "" : "off"; if ((T && G[S][F].isBefore(T, "day")) || (R && G[S][F].isAfter(R, "day"))) { K = " off disabled " } else { if (G[S][F].format("YYYY-MM-DD") == O.format("YYYY-MM-DD")) { K += " active "; if (G[S][F].format("YYYY-MM-DD") == this.startDate.format("YYYY-MM-DD")) { K += " start-date " } if (G[S][F].format("YYYY-MM-DD") == this.endDate.format("YYYY-MM-DD")) { K += " end-date " } } else { if (G[S][F] >= this.startDate && G[S][F] <= this.endDate) { K += " in-range "; if (G[S][F].isSame(this.startDate)) { K += " start-date " } if (G[S][F].isSame(this.endDate)) { K += " end-date " } } } } var Q = "r" + S + "c" + F; H += '<td class="' + K.replace(/\s+/g, " ").replace(/^\s?(.*?)\s?$/, "$1") + '" data-title="' + Q + '">' + G[S][F].date() + "</td>" } H += "</tr>" } H += "</tbody>"; H += "</table>"; H += "</div>"; var P; if (this.timePicker) { H += '<div class="calendar-time">'; H += '<select class="hourselect">'; var I = 0; var L = 23; var J = O.hour(); if (this.timePicker12Hour) { I = 1; L = 12; if (J >= 12) { J -= 12 } if (J === 0) { J = 12 } } for (P = I; P <= L; P++) { if (P == J) { H += '<option value="' + P + '" selected="selected">' + P + "</option>" } else { H += '<option value="' + P + '">' + P + "</option>" } } H += "</select> : "; H += '<select class="minuteselect">'; for (P = 0; P < 60; P += this.timePickerIncrement) { var M = P; if (M < 10) { M = "0" + M } if (P == O.minute()) { H += '<option value="' + P + '" selected="selected">' + M + "</option>" } else { H += '<option value="' + P + '">' + M + "</option>" } } H += "</select> "; if (this.timePicker12Hour) { H += '<select class="ampmselect">'; if (O.hour() >= 12) { H += '<option value="AM">AM</option><option value="PM" selected="selected">PM</option>' } else { H += '<option value="AM" selected="selected">AM</option><option value="PM">PM</option>' } H += "</select>" } H += "</div>" } return H }, remove: function () { this.container.remove(); this.element.off(".daterangepicker"); this.element.removeData("daterangepicker") } }; E.fn.daterangepicker = function (G, F) { this.each(function () { var H = E(this); if (H.data("daterangepicker")) { H.data("daterangepicker").remove() } H.data("daterangepicker", new A(H, G, F)) }); return this } }));